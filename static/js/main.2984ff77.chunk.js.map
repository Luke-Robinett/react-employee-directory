{"version":3,"sources":["utils/api.js","components/search-form.js","components/table-header.js","components/table-row.js","components/table-body.js","components/table.js","components/table-container.js","App.js","serviceWorker.js","index.js"],"names":["count","axios","get","SearchForm","props","for","name","id","placeholder","value","searchString","onChange","handleInputChange","onClick","handleFormSubmit","handleSort","handleFormReset","TableHead","fields","map","field","TableRow","key","values","Object","keys","TableBody","rows","row","Table","className","TableContainer","state","employeeData","displayRows","event","target","setState","preventDefault","filter","includes","sort","rowA","rowB","nameA","toLowerCase","nameB","Api","then","res","data","results","emp","i","last","first","email","catch","err","console","log","this","initialize","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2984ff77.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getEmployees: count => {\r\n        return axios.get(`https://randomuser.me/api/?results=${count}&inc=name,email`);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <form>\r\n            <div>\r\n                <label for=\"search-field\">Search: </label>\r\n                <input\r\n                    name=\"searchString\"\r\n                    id=\"search-field\"\r\n                    placeholder=\"last, first\"\r\n                    value={props.searchString}\r\n                    onChange={props.handleInputChange}\r\n                />\r\n                <button onClick={props.handleFormSubmit}>\r\n                    Search\r\n                </button>\r\n                <button onClick={props.handleSort}>\r\n                    Sort\r\n                </button>\r\n                <button onClick={props.handleFormReset}>\r\n                    Reset\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\n\r\nfunction TableHead(props) {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {\r\n                    props.fields.map(field => {\r\n                        return (\r\n                            <th>{field}</th>\r\n                        )\r\n                    })\r\n                }\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\n\r\nfunction TableRow(props) {\r\n    return (\r\n        <tr key={props.values.id}>\r\n            {\r\n                Object.keys(props.values).map(field => {\r\n                    return (\r\n                        <td>{props.values[field]}</td>\r\n                    )\r\n                })\r\n            }\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableRow;","import React from \"react\";\r\nimport TableRow from \"./table-row\";\r\n\r\nfunction TableBody(props) {\r\n    return (\r\n        <tbody>\r\n            {\r\n                props.rows.map(row => {\r\n                    return (\r\n                        <TableRow values={row} />\r\n                    )\r\n                })\r\n            }\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody;","import React from \"react\";\r\nimport TableHeader from \"./table-header\";\r\nimport TableBody from \"./table-body\";\r\n\r\nfunction Table(props) {\r\n    // Store key names of first row of data, to be used as column headers for table\r\n    const fields = Object.keys({ ...props.rows[0] });\r\n\r\n    return (\r\n        <table className=\"w-100\">\r\n            <TableHeader fields={fields} />\r\n            <TableBody rows={props.rows} />\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { Component } from \"react\";\r\nimport Api from \"../utils/api\";\r\nimport SearchForm from \"./search-form\";\r\nimport Table from \"./table\";\r\n\r\nclass TableContainer extends Component {\r\n    state = {\r\n        // employeeData is updated from the external API when the app first loads\r\n        employeeData: [],\r\n\r\n        // displayRows is initially a mirror of employeeData but becomes a filtered subset of it when a search is performed\r\n        displayRows: [],\r\n\r\n        searchString: \"\"\r\n    };\r\n\r\n    initialize() {\r\n        // Get our names from the external API and update state variables accordingly\r\n        Api.getEmployees(40)\r\n            .then(res => {\r\n                // Transform incoming data so it's easier to work with\r\n                let data = res.data.results.map((emp, i) => {\r\n                    return {\r\n                        // Give our dataset an auto-incremented unique ID field\r\n                        id: i + 1,\r\n\r\n                        // The API returns names as an object of various fields, most of which we don't need\r\n                        // Just grab first and last name and concatenate in the form last, first\r\n                        name: emp.name.last + \", \" + emp.name.first,\r\n\r\n                        email: emp.email\r\n                    };\r\n                });\r\n\r\n                this.setState({\r\n                    employeeData: data,\r\n                    displayRows: data,\r\n                    searchString: \"\"\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState(\r\n            {\r\n                [name]: value\r\n            }\r\n        );\r\n    }\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        // Filter displayedRows by the form's search string\r\n        this.setState(\r\n            {\r\n                displayRows: this.state.employeeData.filter(row => {\r\n                    return (\r\n                        row.name.includes(this.state.searchString)\r\n                    );\r\n                })\r\n            }\r\n        );\r\n    }\r\n\r\n    handleSort = event => {\r\n        event.preventDefault();\r\n\r\n        // Sort table by employee name in ascending order\r\n        this.setState(\r\n            {\r\n                displayRows: this.state.employeeData.sort((rowA, rowB) => {\r\n                    // This comparison logic adapted from example found at:\r\n                    // https://www.w3schools.com/js/js_array_sort.asp\r\n\r\n                    const nameA = rowA.name.toLowerCase();\r\n                    const nameB = rowB.name.toLowerCase();\r\n                    if (nameA < nameB) return -1;\r\n                    if (nameA > nameB) return 1;\r\n                    return 0;\r\n                })\r\n            }\r\n        );\r\n    }\r\n\r\n    handleFormReset = event => {\r\n        event.preventDefault();\r\n\r\n        // Reset search field and show all employees\r\n        this.setState(\r\n            {\r\n                searchString: \"\",\r\n                displayRows: this.state.employeeData\r\n            }\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initialize();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SearchForm\r\n                    searchString={this.state.searchString}\r\n                    handleInputChange={this.handleInputChange}\r\n                    handleFormSubmit={this.handleFormSubmit}\r\n                    handleSort={this.handleSort}\r\n                    handleFormReset={this.handleFormReset}\r\n                />\r\n                <Table rows={this.state.displayRows} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TableContainer;","import React from 'react';\r\nimport './App.css';\r\nimport TableContainer from \"./components/table-container\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Employee Directory</h1>\r\n      <hr />\r\n      <TableContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}