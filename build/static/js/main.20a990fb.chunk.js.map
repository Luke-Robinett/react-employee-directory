{"version":3,"sources":["utils/api.js","components/table-header.js","components/table-row.js","components/table-body.js","components/table.js","App.js","serviceWorker.js","index.js"],"names":["count","axios","get","TableHead","props","fields","map","field","TableRow","key","values","id","Object","keys","TableBody","rows","row","Table","state","employees","Api","then","res","data","results","emp","i","name","last","first","email","setState","catch","err","console","log","this","loadTable","className","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gUAEe,EACG,SAAAA,GACV,OAAOC,IAAMC,IAAN,6CAAgDF,EAAhD,qBCcAG,MAhBf,SAAmBC,GACf,OACI,+BACI,4BAEQA,EAAMC,OAAOC,KAAI,SAAAC,GACb,OACI,4BAAKA,SCOlBC,MAdf,SAAkBJ,GACd,OACI,wBAAIK,IAAKL,EAAMM,OAAOC,IAEdC,OAAOC,KAAKT,EAAMM,QAAQJ,KAAI,SAAAC,GAC1B,OACI,4BAAKH,EAAMM,OAAOH,SCS3BO,MAdf,SAAmBV,GACf,OACI,+BAEQA,EAAMW,KAAKT,KAAI,SAAAU,GACX,OACI,kBAAC,EAAD,CAAUN,OAAQM,SCyC3BC,E,4MA1CXC,MAAQ,CACJC,UAAW,I,0DAGF,IAAD,OACRC,EAAiB,IACZC,MAAK,SAAAC,GAEF,IAAIC,EAAOD,EAAIC,KAAKC,QAAQlB,KAAI,SAACmB,EAAKC,GAClC,MAAO,CACHf,GAAIe,EAAI,EACRC,KAAMF,EAAIE,KAAKC,KAAO,KAAOH,EAAIE,KAAKE,MACtCC,MAAOL,EAAIK,UAInB,EAAKC,SAAS,CACVZ,UAAWI,OAGlBS,OAAM,SAAAC,GACHC,QAAQC,IAAIF,Q,0CAKpBG,KAAKC,c,+BAKL,IAAMhC,EAASO,OAAOC,KAAPD,OAAA,IAAAA,CAAA,GAAiBwB,KAAKlB,MAAMC,UAAU,KAErD,OACI,2BAAOmB,UAAU,SACb,kBAAC,EAAD,CAAajC,OAAQA,IACrB,kBAAC,EAAD,CAAWU,KAAMqB,KAAKlB,MAAMC,iB,GArCxBoB,aCMLC,MATf,WACE,OACE,yBAAKF,UAAU,OACb,kDACA,kBAAC,EAAD,QCIcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.20a990fb.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getEmployees: count => {\r\n        return axios.get(`https://randomuser.me/api/?results=${count}&inc=name,email`);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nfunction TableHead(props) {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {\r\n                    props.fields.map(field => {\r\n                        return (\r\n                            <th>{field}</th>\r\n                        )\r\n                    })\r\n                }\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\n\r\nfunction TableRow(props) {\r\n    return (\r\n        <tr key={props.values.id}>\r\n            {\r\n                Object.keys(props.values).map(field => {\r\n                    return (\r\n                        <td>{props.values[field]}</td>\r\n                    )\r\n                })\r\n            }\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableRow;","import React from \"react\";\r\nimport TableRow from \"./table-row\";\r\n\r\nfunction TableBody(props) {\r\n    return (\r\n        <tbody>\r\n            {\r\n                props.rows.map(row => {\r\n                    return (\r\n                        <TableRow values={row} />\r\n                    )\r\n                })\r\n            }\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody;","// To-do: add image thumbnail for each employee\r\n\r\nimport React, { Component } from \"react\";\r\nimport Api from \"../utils/api\";\r\nimport TableHeader from \"./table-header\";\r\nimport TableBody from \"./table-body\";\r\n\r\nclass Table extends Component {\r\n    state = {\r\n        employees: []\r\n    };\r\n\r\n    loadTable() {\r\n        Api.getEmployees(20)\r\n            .then(res => {\r\n                // Transform incoming data so it's easier to work with\r\n                let data = res.data.results.map((emp, i) => {\r\n                    return {\r\n                        id: i + 1, // auto-incremented unique ID\r\n                        name: emp.name.last + \", \" + emp.name.first,\r\n                        email: emp.email\r\n                    };\r\n                });\r\n\r\n                this.setState({\r\n                    employees: data\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTable();\r\n    }\r\n\r\n    render() {\r\n        // Store key names of first row of data, to be used as column headers for table\r\n        const fields = Object.keys({ ...this.state.employees[0] });\r\n\r\n        return (\r\n            <table className=\"w-100\">\r\n                <TableHeader fields={fields} />\r\n                <TableBody rows={this.state.employees} />\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Table from \"./components/table\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Employee Directory</h1>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}